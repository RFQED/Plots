////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

// data products
#include "gm2ringsim/calo/XtalArtRecord.hh"
#include "gm2ringsim/strawtracker/StrawArtRecord.hh"
#include "gm2dataproducts/strawtracker/StrawDigitArtRecord.hh"
#include "gm2dataproducts/strawtracker/StrawTimeIslandArtRecord.hh"

// common util
#include "gm2util/common/dataModuleDefs.hh"
#include "gm2util/common/RootManager.hh"
#include "gm2tracker/utils/StrawObjectSorter.hh"

// root 
#include "TMath.h"

#include "gm2ringsim/actions/PGA/GasGunBase/GasGunArtRecord.hh"

#include "gm2geom/coordSystems/CoordSystem.hh"
#include "gm2geom/coordSystems/CoordSystemsStoreData.hh"
#include "gm2geom/coordSystems/CoordSystemsStore_service.hh"
#include "gm2geom/coordSystems/CoordSystem3Vector.hh"  

#include "gm2geom/common/Gm2Constants_service.hh"
//#include "gm2ringsim/actions/PGA/GasGunBdyn/GasGunBdyn_service.hh"
#include "gm2util/common/dataModuleDefs.hh"


#include <memory>

#include <math.h>


class NumberOfStrawHitsPerTrack;

class NumberOfStrawHitsPerTrack : public art::EDAnalyzer {
public:
  explicit NumberOfStrawHitsPerTrack(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  NumberOfStrawHitsPerTrack(NumberOfStrawHitsPerTrack const &) = delete;
  NumberOfStrawHitsPerTrack(NumberOfStrawHitsPerTrack &&) = delete;
  NumberOfStrawHitsPerTrack & operator = (NumberOfStrawHitsPerTrack const &) = delete;
  NumberOfStrawHitsPerTrack & operator = (NumberOfStrawHitsPerTrack &&) = delete;

  // Required functions.
  void analyze(art::Event const & e) override;
  void beginRun(art::Run const & r ) override;
  void endRun(art::Run const & r) override;

  std::unique_ptr<TFile> outputRootFile_;
  std::unique_ptr<RootManager> rootManager_;

  std::string outputRootFileName_;

  std::string strawModuleLabel_;
  std::string strawInstanceName_;

  mf::LogInfo info_;

  int strawNumber_;
  int moduleNumber_;
  int strawCount;
  int track_ID_;
 
  int layerNumber_;

  double yGlo_;
    
  int parent_ID_;

  std::string straw_particle_name_;

private:
  // Declare member data here.

};

NumberOfStrawHitsPerTrack::NumberOfStrawHitsPerTrack(fhicl::ParameterSet const & p)
  :
  EDAnalyzer(p) 
  , outputRootFileName_( p.get<std::string>("outputFile", "NumberOfLayerHitsPerModule.root") )
  , strawModuleLabel_( p.get<std::string>("strawModuleLabel", "artg4"))
  , strawInstanceName_ (p.get<std::string>("strawInstanceName", "straws"))
 

  // More initializers here.
{
}

void NumberOfStrawHitsPerTrack::analyze(art::Event const & e)
{
  // Implementation of required member function here.
  
  mf::LogInfo info("NumberOfStrawHitsPerTrack");
  //get the art records here
  art::Handle< gm2ringsim::StrawArtRecordCollection > strawDataHandle;
  e.getByLabel(strawModuleLabel_, strawInstanceName_, strawDataHandle);
  StrawArtRecordCollection const & strawHits = *strawDataHandle;

  bool mod_lay[8][4]; //= {{false}};
  for (int im = 0; im < 8; im++){
    for (int il = 0; il < 4; il++){
      mod_lay[im][il] = false;
    }
  }

  for ( auto strawData : strawHits){
    strawNumber_ = strawData.strawInRow;
    moduleNumber_ = strawData.moduleNumber;
    yGlo_ = strawData.y_global;    
    parent_ID_ = strawData.parent_ID;
    layerNumber_ = strawData.layerNumber;
    track_ID_ = strawData.trackID;
    straw_particle_name_ = strawData.particle_name;

    // count++;
    if (straw_particle_name_ == "e+" && parent_ID_ == 1){
      int viewNumber = strawData.viewNumber;
      int viewOffset = (viewNumber == 0)? 0 : 2;
      mod_lay[moduleNumber_][viewOffset + layerNumber_] = true;
    }

  }
  int totalLayersHit[5] = {0};
  int totalHitsPerModule = 0;
  for (int im = 0; im < 8; im++){
    for (int il = 0; il < 4; il++){
      if (mod_lay[im][il]) totalHitsPerModule ++; 
    }
    //  info << "module " << im <<  " has " << totalHitsPerModule << " layers hit \n";
    totalLayersHit[totalHitsPerModule]++;
    totalHitsPerModule = 0;
  }
  //info << "total times we have 2 layers hit " << totalLayersHit[1] << "\n";

  for (int i=0; i < 5; i++){
    //info << " loop over layers hit " << i << " totalLayersHit " << totalLayersHit[i] << "\n";
    rootManager_->Get<TH1F*>("LayersHit")->Fill(i,totalLayersHit[i]); 
  }

}

void NumberOfStrawHitsPerTrack::beginRun(art::Run const & r)
{
  mf::LogInfo info("NumberOfStrawHitsPerTrack");
  info << "Enter NumberOfStrawHitsPerTrack::beginJob\n";

  // create a root file and manager
  outputRootFile_.reset( new TFile(outputRootFileName_.c_str(),"recreate") );
  rootManager_.reset( new RootManager("StrawModuleHits",outputRootFile_.get()) );


  rootManager_->Add( new TH1F( "LayersHit", "Straws Layers Hit Per Module", 5, 0, 5));
  rootManager_->Add( new TH1F( "LayersHitAverage", "Straws Layers Hit Per Module", 5, 0, 5));



  info << "Exit NumberOfStrawHitsPerTrack::beginJob\n";
}

void NumberOfStrawHitsPerTrack::endRun(art::Run const & r)
{
  mf::LogInfo info("NumberOfStrawHitsPerTrack");
  info << "Enter NumberOfStrawHitsPerTrack::endJob\n";
 
  int Total = 0;
  for ( int x = 1; x < 6; x++){
    Total += rootManager_->Get<TH1F*>( "LayersHit")->GetBinContent(x);
  }
  info << "total is " << Total << "\n";

  double AvgHits = 0;
  for ( int x = 1; x < 6; x++){
    AvgHits = rootManager_->Get<TH1F*>( "LayersHit")->GetBinContent(x);
    AvgHits = AvgHits / Total;
    rootManager_->Get<TH1F*>("LayersHitAverage")->Fill(x-1,AvgHits); 
    AvgHits = 0;
  }
  
  TCanvas* c1 = new TCanvas("c", "c", 1500, 1000);
  rootManager_->Get<TH1F*>( "LayersHitAverage")->SetBit(TH1::kNoStats);
  rootManager_->Get<TH1F*>( "LayersHitAverage")->GetXaxis()->SetTitle("Number of Layers Hit Per Module");
  rootManager_->Get<TH1F*>( "LayersHitAverage")->GetYaxis()->SetTitle("Probability");
  rootManager_->Get<TH1F*>( "LayersHitAverage")->GetXaxis()->SetNdivisions(6);
  rootManager_->Get<TH1F*>( "LayersHitAverage")->GetXaxis()->TAxis::CenterLabels();
  rootManager_->Get<TH1F*>("LayersHitAverage")->Draw(); 
  c1->SaveAs("StrawsHitPerModuleAverage.pdf");



  rootManager_->Get<TH1F*>( "LayersHit")->SetBit(TH1::kNoStats);
  rootManager_->Get<TH1F*>( "LayersHit")->GetXaxis()->SetTitle("Number of Layers Hit Per Module");
  rootManager_->Get<TH1F*>( "LayersHit")->GetYaxis()->SetTitle("Hits");
  rootManager_->Get<TH1F*>( "LayersHit")->GetXaxis()->SetNdivisions(6);
  rootManager_->Get<TH1F*>( "LayersHit")->GetXaxis()->TAxis::CenterLabels();
  rootManager_->Get<TH1F*>( "LayersHit")->Draw();
  c1->SaveAs("StrawsHitPerModule.pdf");


  rootManager_->WriteToFile();
  outputRootFile_->Close();

 


  info  << "Exit NumberOfStrawHitsPerTrack::endJob \n";


}


DEFINE_ART_MODULE(NumberOfStrawHitsPerTrack)
